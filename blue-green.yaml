AWSTemplateFormatVersion: 2010-09-09
Description: A-New-Startup - ECS - Do a Blue/Green Deployment Via CloudFormation, utilizing CFN Hooks

#
# NOTE: You CANNOT define Outputs or use ImportValue with this template:
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/blue-green.html
#

Parameters:
  VpcId:
    Type: String
  PublicSubnets:
    Type: String
  Cluster:
    Type: String
  ImageUri:
    Type: String
  TaskRoleArn:
    Type: String
  TableName:
    Type: String
  TopicArn:
    Type: String
    
Transform:
  - 'AWS::CodeDeployBlueGreen'

Hooks:
  CodeDeployBlueGreenHook:
    Properties:
      TrafficRoutingConfig:
        Type: TimeBasedLinear 
        TimeBasedLinear:
          # Shift traffic over 3 minutes
          StepPercentage: 34
          BakeTimeMins: 1
      AdditionalOptions:
        # Keep the Blue set for 5 minutes afterwards, in case we need to roll back.
        TerminationWaitTimeInMinutes: 5
      Applications:
        - Target:
            Type: 'AWS::ECS::Service'
            LogicalID: ECSDemoService
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreenTaskDefinition
            TaskSets:
              - BlueTaskSet
              - GreenTaskSet
            TrafficRouting:
              ProdTrafficRoute:
                Type: 'AWS::ElasticLoadBalancingV2::Listener'
                LogicalID: ALBListenerProdTraffic
              TargetGroups:
                - ALBTargetGroupBlue
                - ALBTargetGroupGreen
    Type: 'AWS::CodeDeploy::BlueGreen'

Resources:

  ExampleSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for ec2 access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  ALBTargetGroupBlue:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: '3000'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref VpcId
      
  ALBTargetGroupGreen:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: '3000'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref VpcId
      
  ExampleALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Join ['-', [!Ref Cluster, "a-new-startup-bluegreen"]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ExampleSecurityGroup
      Subnets: !Split [',', !Ref PublicSubnets]
      Type: application
      IpAddressType: ipv4
      
  ALBListenerProdTraffic:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      LoadBalancerArn: !Ref ExampleALB
      Port: 80
      Protocol: HTTP
      
  ALBListenerProdRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref ALBListenerProdTraffic
      Priority: 1
      
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        
  BlueTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      TaskRoleArn: !Ref TaskRoleArn
      ExecutionRoleArn: !GetAtt 
        - ECSTaskExecutionRole
        - Arn
      ContainerDefinitions:
        - Name: a-new-startup
          Image: !Ref ImageUri
          Essential: true
          PortMappings:
            - Protocol: tcp
              ContainerPort: 3000
          Environment:
            - Name: APP_TABLE_NAME
              Value: !Ref TableName
            - Name: APP_TOPIC_ARN
              Value: !Ref TopicArn

      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      Family: a-new-startup-bluegreen
      
  ECSDemoService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: "a-new-startup-bluegreen"
      Cluster: !Ref Cluster
      DesiredCount: 2
      DeploymentController:
        # Not ECS, Not CODE_DEPLOY
        Type: EXTERNAL
        
  BlueTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ExampleSecurityGroup
          Subnets: !Split [',', !Ref PublicSubnets]
      PlatformVersion: 1.4.0
      # A floating-point percentage of your desired number of tasks to place and keep running in the task set.
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref ECSDemoService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: a-new-startup
          ContainerPort: 3000
          TargetGroupArn: !Ref ALBTargetGroupBlue
          
  PrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref Cluster
      Service: !Ref ECSDemoService
      TaskSetId: !GetAtt 
        - BlueTaskSet
        - Id